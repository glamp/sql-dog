{
  "name": "levenshtein",
  "description": "Javascript implementation of the L-diggity.",
  "author": {
    "name": "Gianni Chiappetta",
    "email": "gianni@runlevel6.org",
    "url": "http://gf3.ca"
  },
  "version": "1.0.2",
  "main": "./lib/levenshtein",
  "engines": [
    "node >=0.2.0"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/gf3/Levenshtein.git"
  },
  "license": {
    "type": "Public Domain",
    "url": "http://github.com/gf3/Levenshtein/raw/master/UNLICENSE"
  },
  "devDependencies": {
    "expresso": "~0.9.2"
  },
  "scripts": {
    "test": "expresso test"
  },
  "readme": "# Levenshtein\n\n[Levenshtein](http://en.wikipedia.org/wiki/Levenshtein_distance) string difference in Javascript.\n\n![Screenshot](http://f.cl.ly/items/0E3B0c3H3z3F1A2t1437/Levenshtein.png)\n\n`Levenshtein` also does some neat things like coerce to a number and string\napproproately. So you can compare Levenshtein objects directly! Not to mention\nit has specs!\n\n## API\n\n* `new Levenshtein( m, n )` → `Levenshtein`\n    * m ( `String` ): First string.\n    * n ( `String` ): Second string.\n    * Initialise a new Levenshtein object.\n\n* `Levenshtein#distance` → `Number`\n    * Distance between strings.\n\n* `Levenshtein#inspect()` → `String`\n    * Pretty print Levenshtein table.\n\n* `Levenshtein#toString()` → `String`\n    * Alias of: `Levenshtein#inspect`.\n\n## Installation\n\nWith npm:\n\n    npm install levenshtein\n\nWith git:\n\n    git clone git://github.com/gf3/Levenshtein.git\n\n## License\n\nLevenshtein is [UNLICENSED](http://unlicense.org/).\n\n## Author\n\nWritten by [Gianni Chiappetta](https://github.com/gf3) &ndash; [gf3.ca](http://gf3.ca)\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gf3/Levenshtein/issues"
  },
  "_id": "levenshtein@1.0.2",
  "dist": {
    "shasum": "cd02e8b32075645ddcf5d059e02efa918f9fb3ec"
  },
  "_from": "levenshtein@",
  "_resolved": "https://registry.npmjs.org/levenshtein/-/levenshtein-1.0.2.tgz"
}
